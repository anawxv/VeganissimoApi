// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vegan.api.Data;

#nullable disable

namespace Vegan.api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FornecedorRestaurante", b =>
                {
                    b.Property<int>("FornecedorsIdFornecedor")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantesIdRes")
                        .HasColumnType("int");

                    b.HasKey("FornecedorsIdFornecedor", "RestaurantesIdRes");

                    b.HasIndex("RestaurantesIdRes");

                    b.ToTable("RestauranteFornecedor", (string)null);
                });

            modelBuilder.Entity("PratoRestauranteRestaurante", b =>
                {
                    b.Property<int>("PratosRestaurantesIdPrato")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantesIdRes")
                        .HasColumnType("int");

                    b.HasKey("PratosRestaurantesIdPrato", "RestaurantesIdRes");

                    b.HasIndex("RestaurantesIdRes");

                    b.ToTable("PratosRestaurantes", (string)null);
                });

            modelBuilder.Entity("Vegan.api.Models.Fornecedor", b =>
                {
                    b.Property<int>("IdFornecedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idfornecedor")
                        .HasComment("Fornecedor IDFornecedor as a primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFornecedor"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email")
                        .HasComment("Fornecedor email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("nome")
                        .HasComment("Fornecedor nome");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone")
                        .HasComment("Fornecedor phone number");

                    b.Property<int?>("ProdutoIdProd")
                        .HasColumnType("int");

                    b.HasKey("IdFornecedor");

                    b.HasIndex("ProdutoIdProd");

                    b.ToTable("fornecedor");

                    b.HasData(
                        new
                        {
                            IdFornecedor = 1,
                            Email = "jaojoao@gmail.com",
                            Nome = "Jão João",
                            Phone = "40028922"
                        });
                });

            modelBuilder.Entity("Vegan.api.Models.PratoRestaurante", b =>
                {
                    b.Property<int>("IdPrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idprato")
                        .HasComment("Prato IDPrato as a primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrato"));

                    b.Property<string>("DescricaoPrato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descricaoprato")
                        .HasComment("Descricao do prato");

                    b.Property<int>("IdRes")
                        .HasColumnType("int");

                    b.Property<string>("NomePrato")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("nomeprato")
                        .HasComment("Prato nome");

                    b.Property<int>("PrecoPrato")
                        .HasColumnType("int")
                        .HasColumnName("PrecoPrato")
                        .HasComment("Preco do prato");

                    b.HasKey("IdPrato");

                    b.ToTable("pratorestaurante");

                    b.HasData(
                        new
                        {
                            IdPrato = 1,
                            DescricaoPrato = "Lasanha vegana de aabobrinha, cogumelos e espinafre",
                            IdRes = 1,
                            NomePrato = "Lasanha de abobrinha vegana",
                            PrecoPrato = 32
                        });
                });

            modelBuilder.Entity("Vegan.api.Models.Produto", b =>
                {
                    b.Property<int>("IdProd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idprod")
                        .HasComment("Produto IDProd as a primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProd"));

                    b.Property<string>("DescricaoProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descricaoprod")
                        .HasComment("Descricao do produto");

                    b.Property<int>("IdFornecedor")
                        .HasColumnType("int");

                    b.Property<string>("NomeProd")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("nomeprod")
                        .HasComment("Produto nome");

                    b.Property<int>("PrecoProd")
                        .HasColumnType("int")
                        .HasColumnName("PrecoProd")
                        .HasComment("Preco do produto");

                    b.HasKey("IdProd");

                    b.HasIndex("IdFornecedor");

                    b.ToTable("produto");

                    b.HasData(
                        new
                        {
                            IdProd = 1,
                            DescricaoProd = "Shampoo com ingredientes naturais. Cruelty-free e vegano",
                            IdFornecedor = 1,
                            NomeProd = "Shampoo de menta vegano",
                            PrecoProd = 25
                        });
                });

            modelBuilder.Entity("Vegan.api.Models.Restaurante", b =>
                {
                    b.Property<int>("IdRes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idres")
                        .HasComment("Restaurante IDRestaurante as a primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRes"));

                    b.Property<string>("DescricaoRes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descricaores")
                        .HasComment("Descricao do restaurante");

                    b.Property<int>("IdFornecedor")
                        .HasColumnType("int");

                    b.Property<string>("NomeRes")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("nomeres")
                        .HasComment("Restaurante nome");

                    b.HasKey("IdRes");

                    b.ToTable("restaurante");

                    b.HasData(
                        new
                        {
                            IdRes = 1,
                            DescricaoRes = "Um dos melhores restaurantes veganos de sp. Localizado na Vila Madalena, Rua papap, n° tal",
                            IdFornecedor = 1,
                            NomeRes = "Brown kitchen"
                        });
                });

            modelBuilder.Entity("FornecedorRestaurante", b =>
                {
                    b.HasOne("Vegan.api.Models.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("FornecedorsIdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vegan.api.Models.Restaurante", null)
                        .WithMany()
                        .HasForeignKey("RestaurantesIdRes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PratoRestauranteRestaurante", b =>
                {
                    b.HasOne("Vegan.api.Models.PratoRestaurante", null)
                        .WithMany()
                        .HasForeignKey("PratosRestaurantesIdPrato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vegan.api.Models.Restaurante", null)
                        .WithMany()
                        .HasForeignKey("RestaurantesIdRes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vegan.api.Models.Fornecedor", b =>
                {
                    b.HasOne("Vegan.api.Models.Produto", null)
                        .WithMany("Fornecedors")
                        .HasForeignKey("ProdutoIdProd");
                });

            modelBuilder.Entity("Vegan.api.Models.Produto", b =>
                {
                    b.HasOne("Vegan.api.Models.Fornecedor", "Fornecedor")
                        .WithMany("Produtos")
                        .HasForeignKey("IdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("Vegan.api.Models.Fornecedor", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Vegan.api.Models.Produto", b =>
                {
                    b.Navigation("Fornecedors");
                });
#pragma warning restore 612, 618
        }
    }
}
